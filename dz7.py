# Задача 34: Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку
# разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам
# стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число
# гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного
# слова, если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг
# от друга пробелами. Стихотворение Винни-Пух вбивает в программу с клавиатуры. В ответе
# напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не
# в порядке.
# Ввод: 
# пара-ра-рам рам-пам-папам па-ра-па-дам 

# Вывод:
# Парам пам-пам

def counting_vowels(stroka) -> int: # функция для подсчета кол-ва гласных в слове
    array_glas = { 1: 'ё, у, е, ы, а, о, э, я, и, ю' }
    word_arr = []

    for letter in stroka:
        word_arr.append(letter)
        
    points = 0

    for i in word_arr:
        for key in array_glas:
            for j in array_glas[key]:
                if j in i:
                    points += key
    return points

def ritm(lists_1): # функция для проверки одинаковости гласных букв в каждом слове
    lists_2 = list(map(lambda x: counting_vowels(x), lists_1))
    
    if max(lists_2) == min(lists_2):
        print('Парам пам-пам')
    else:
        print('Пам парам')

values = input('Введите стихотворение: ').lower().split()
counting_vowels(values)
ritm(values)

# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и
# столбца. Аргументы num_rows и num_columns указывают число строк и столбцов таблицы,
# которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте,
# почему не с нуля). Примечание: бинарной операцией называется любая операция, у которой
# ровно два аргумента, как, например, у операции умножения.

# Ввод:
# print_operation_table(lambda x, y: x * y)

# Вывод:
# 1 2 3 4 5 6 
# 2 4 6 8 10 12
# 3 6 9 12 15 18
# 4 8 12 16 20 24
# 5 10 15 20 25 30
# 6 12 18 24 30 36

# def print_operation_table(operation, num_rows = 6, num_columns = 6):
#     for i in range(1, num_rows + 1):
#         for j in range(1, num_columns + 1):
#             print(operation(i, j), end = ' ')
#         print()

# print_operation_table(lambda x, y: x * y)

